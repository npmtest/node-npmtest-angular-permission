{"/home/travis/build/npmtest/node-npmtest-angular-permission/test.js":"/* istanbul instrument in package npmtest_angular_permission */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-angular-permission/lib.npmtest_angular_permission.js":"/* istanbul instrument in package npmtest_angular_permission */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_angular_permission = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_angular_permission = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-angular-permission/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-angular-permission && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_angular_permission */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_angular_permission\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_angular_permission.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_angular_permission.rollup.js'] =\n            local.assetsDict['/assets.npmtest_angular_permission.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_angular_permission.__dirname + '/lib.npmtest_angular_permission.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-angular-permission/node_modules/angular-permission/index.js":"/**\n * angular-permission\n * Fully featured role and permission based access control for your angular applications\n * @version v5.2.3 - 2017-04-06\n * @link https://github.com/Narzerus/angular-permission\n * @author Rafael Vidaurre <narzerus@gmail.com> (http://www.rafaelvidaurre.com), Blazej Krysiak <blazej.krysiak@gmail.com>\n * @license MIT License, http://www.opensource.org/licenses/MIT\n */\n\n(function () {\n  'use strict';\n\n  var permission = require('./dist/angular-permission.js'),\n    ngPermission = require('./dist/angular-permission-ng.js'),\n    uiPermission = require('./dist/angular-permission-ui.js');\n\n  module.exports = {\n    permission: permission,\n    ngPermission: ngPermission,\n    uiPermission: uiPermission\n  };\n})();\n","/home/travis/build/npmtest/node-npmtest-angular-permission/node_modules/angular-permission/dist/angular-permission.js":"/**\n * angular-permission\n * Fully featured role and permission based access control for your angular applications\n * @version v5.2.3 - 2017-04-06\n * @link https://github.com/Narzerus/angular-permission\n * @author Rafael Vidaurre <narzerus@gmail.com> (http://www.rafaelvidaurre.com), Blazej Krysiak <blazej.krysiak@gmail.com>\n * @license MIT License, http://www.opensource.org/licenses/MIT\n */\n\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * @namespace permission\n   */\n\n  $q.$inject = ['$delegate'];\n  PermPermission.$inject = ['$q', '$injector', 'PermTransitionProperties'];\n  PermRole.$inject = ['$q', '$injector', 'PermPermissionStore', 'PermTransitionProperties'];\n  PermPermissionStore.$inject = ['PermPermission'];\n  PermRoleStore.$inject = ['PermRole'];\n  PermissionDirective.$inject = ['$log', '$injector', 'PermPermissionMap', 'PermPermissionStrategies'];\n  PermAuthorization.$inject = ['$q'];\n  PermPermissionMap.$inject = ['$q', '$log', '$injector', '$permission', 'PermTransitionProperties', 'PermRoleStore', 'PermPermissionStore'];\n  var permission = angular.module('permission', []);\n\n  /* istanbul ignore if  */\n  if (typeof module !== 'undefined' && typeof exports !== 'undefined' && module.exports === exports) {\n    module.exports = permission.name;\n  }\n\n  /**\n   * Permission module configuration provider\n   *\n   * @name permission.permissionProvider\n   */\n  function $permission() {\n    'ngInject';\n\n    var defaultOnAuthorizedMethod = 'showElement';\n    var defaultOnUnauthorizedMethod = 'hideElement';\n    var suppressUndefinedPermissionWarning = false;\n\n    /**\n     * Methods allowing to alter default directive onAuthorized behaviour in permission directive\n     * @methodOf permission.permissionProvider\n     *\n     * @param onAuthorizedMethod {String} One of permission.PermPermissionStrategies method names\n     */\n    this.setDefaultOnAuthorizedMethod = function (onAuthorizedMethod) { // jshint ignore:line\n      defaultOnAuthorizedMethod = onAuthorizedMethod;\n    };\n\n    /**\n     * Methods allowing to alter default directive onUnauthorized behaviour in permission directive\n     * @methodOf permission.permissionProvider\n     *\n     * @param onUnauthorizedMethod {String} One of permission.PermPermissionStrategies method names\n     */\n    this.setDefaultOnUnauthorizedMethod = function (onUnauthorizedMethod) { // jshint ignore:line\n      defaultOnUnauthorizedMethod = onUnauthorizedMethod;\n    };\n\n\n    /**\n     * When set to true hides permission warning for undefined roles and permissions\n     * @methodOf permission.permissionProvider\n     *\n     * @param value {Boolean}\n     */\n    this.suppressUndefinedPermissionWarning = function (value) { // jshint ignore:line\n      suppressUndefinedPermissionWarning = value;\n    };\n\n\n    this.$get = function () { // jshint ignore:line\n      return {\n        defaultOnAuthorizedMethod: defaultOnAuthorizedMethod,\n        defaultOnUnauthorizedMethod: defaultOnUnauthorizedMethod,\n        suppressUndefinedPermissionWarning: suppressUndefinedPermissionWarning\n      };\n    };\n  }\n\n  angular\n    .module('permission')\n    .provider('$permission', $permission);\n\n  /**\n   * Extends $q implementation by A+ *any* method\n   * @name permission.$q\n   *\n   * @extends {angular.$q}\n   *\n   * @param $delegate {Object} Parent instance being extended\n   */\n  function $q($delegate) {\n    'ngInject';\n\n    $delegate.any = any;\n\n    /**\n     * Implementation of missing $q `any` method that wits for first resolution of provided promise set\n     * @methodOf permission.$q\n     *\n     * @param promises {Array|promise} Single or set of promises\n     *\n     * @returns {Promise} Returns a single promise that will be rejected with an array/hash of values,\n     *  each value corresponding to the promise at the same index/key in the `promises` array/hash.\n     *  If any of the promises is resolved, this resulting promise will be returned\n     *  with the same resolution value.\n     */\n    function any(promises) {\n      var deferred = $delegate.defer(),\n        counter = 0,\n        results = angular.isArray(promises) ? [] : {};\n\n      angular.forEach(promises, function (promise, key) {\n        counter++;\n        $delegate\n          .when(promise)\n          .then(function (value) {\n            deferred.resolve(value);\n          })\n          .catch(function (reason) {\n            results[key] = reason;\n            if (!(--counter)) {\n              deferred.reject(reason);\n            }\n          });\n      });\n\n      if (counter === 0) {\n        deferred.reject(results);\n      }\n\n      return deferred.promise;\n    }\n\n    return $delegate;\n  }\n\n  angular\n    .module('permission')\n    .decorator('$q', $q);\n\n\n  /**\n   * Pre-defined available configurable behaviours of directive `permission`\n   * @name permission.PermPermissionStrategies\n   * @readonly\n   *\n   * @example\n   * <div permission\n   *      permission-except=\"'MANAGER'\"\n   *      permission-on-authorized=\"PermPermissionStrategies.renderContent\"\n   *      permission-on-unauthorized=\"PermPermissionStrategies.removeContent\">\n   * </div>\n   *\n   * @property enableElement {Function}\n   * @property disableElement {Function}\n   * @property showElement {Function}\n   * @property hideElement {Function}\n   */\n  var PermPermissionStrategies = {\n    enableElement: function ($element) {\n      $element.removeAttr('disabled');\n    },\n    disableElement: function ($element) {\n      $element.attr('disabled', 'disabled');\n    },\n    showElement: function ($element) {\n      $element.removeClass('ng-hide');\n    },\n    hideElement: function ($element) {\n      $element.addClass('ng-hide');\n    }\n  };\n\n  angular\n    .module('permission')\n    .value('PermPermissionStrategies', PermPermissionStrategies)\n    .value('PermissionStrategies', PermPermissionStrategies);\n\n\n  /**\n   * Helper object used for storing ui-router/ng-route transition parameters\n   * @name permission.PermTransitionProperties\n   *\n   * @type {Object.<String,Object>}\n   *\n   * Transition properties for ui-router:\n   * @property toState {Object} Target state object [ui-router]\n   * @property toParams {Object} Target state params [ui-router]\n   * @property fromState {Object} Source state object [ui-router]\n   * @property fromParams {Object} Source state params [ui-router]\n   * @property options {Object} Transition options [ui-router]\n   *\n   * Transition properties for ng-route:\n   * @property current {Object} Current state properties [ng-route]\n   * @property next {Object} Next state properties [ng-route]\n   */\n  var PermTransitionProperties = {};\n\n  angular\n    .module('permission')\n    .value('PermTransitionProperties', PermTransitionProperties);\n\n  /**\n   * Interface responsible for managing and emitting events dependent on router implementation\n   * @name permission.PermTransitionEvents\n   */\n  function PermTransitionEvents() {\n    'ngInject';\n\n    this.broadcastPermissionStartEvent = function () {\n      throw new Error('Method broadcastPermissionStartEvent in PermTransitionEvents interface must be implemented');\n    };\n\n    this.broadcastPermissionAcceptedEvent = function () {\n      throw new Error('Method broadcastPermissionAcceptedEvent in PermTransitionEvents interface must be implemented');\n    };\n\n    this.broadcastPermissionDeniedEvent = function () {\n      throw new Error('Method broadcastPermissionDeniedEvent in PermTransitionEvents interface must be implemented');\n    };\n  }\n\n  angular\n    .module('permission')\n    .service('PermTransitionEvents', PermTransitionEvents);\n\n\n  /**\n   * PermPermission definition factory\n   * @function\n   *\n   * @param $q {Object} Angular promise implementation\n   * @param $injector {Object} Dependency injection instance\n   * @param PermTransitionProperties {permission.PermTransitionProperties} Helper storing ui-router transition parameters\n   *\n   * @return {Permission}\n   */\n  function PermPermission($q, $injector, PermTransitionProperties) {\n    'ngInject';\n\n    /**\n     * PermPermission definition object constructor\n     * @constructor Permission\n     *\n     * @param permissionName {String} Name repressing permission\n     * @param validationFunction {Function} Function used to check if permission is valid\n     */\n    function Permission(permissionName, validationFunction) {\n      validateConstructor(permissionName, validationFunction);\n\n      this.permissionName = permissionName;\n      this.validationFunction = annotateValidationFunction(validationFunction);\n    }\n\n    /**\n     * Checks if permission is still valid\n     * @methodOf permission.Permission\n     *\n     * @returns {Promise}\n     */\n    Permission.prototype.validatePermission = function () {\n      var validationLocals = {\n        permissionName: this.permissionName,\n        transitionProperties: PermTransitionProperties\n      };\n      var validationResult = $injector.invoke(this.validationFunction, null, validationLocals);\n\n      if (!angular.isFunction(validationResult.then)) {\n        validationResult = wrapInPromise(validationResult, this.permissionName);\n      }\n\n      return validationResult;\n    };\n\n    /**\n     * Converts a value into a promise, if the value is truthy it resolves it, otherwise it rejects it\n     * @methodOf permission.Permission\n     * @private\n     *\n     * @param result {Boolean} Function to be wrapped into promise\n     * @param permissionName {String} Returned value in promise\n     *\n     * @return {Promise}\n     */\n    function wrapInPromise(result, permissionName) {\n      if (result) {\n        return $q.resolve(permissionName);\n      }\n\n      return $q.reject(permissionName);\n    }\n\n    /**\n     * Checks if provided permission has accepted parameter types\n     * @methodOf permission.Permission\n     * @private\n     *\n     * @throws {TypeError}\n     *\n     * @param permissionName {String} Name repressing permission\n     * @param validationFunction {Function} Function used to check if permission is valid\n     */\n    function validateConstructor(permissionName, validationFunction) {\n      if (!angular.isString(permissionName)) {\n        throw new TypeError('Parameter \"permissionName\" name must be String');\n      }\n      if (!angular.isFunction(validationFunction) && !angular.isArray(validationFunction)) {\n        throw new TypeError('Parameter \"validationFunction\" must be Function or an injectable Function using explicit annotation');\n      }\n    }\n\n    /**\n     * Ensures the validation is injectable using explicit annotation.\n     * Wraps a non-injectable function for backwards compatibility\n     * @methodOf permission.Permission\n     * @private\n     *\n     * @param validationFunction {Function} Function to wrap with injectable if needed\n     *\n     * @return {Function} Explicitly injectable function\n     */\n    function annotateValidationFunction(validationFunction) {\n      if (!angular.isArray(validationFunction.$inject || validationFunction)) {\n        // The function is not explicitly annotated, so assume using old-style parameters\n        // and manually prepare for injection using our known old API parameters\n        validationFunction = ['permissionName', 'transitionProperties', validationFunction];\n      }\n\n      return validationFunction;\n    }\n\n    return Permission;\n  }\n\n  angular\n    .module('permission')\n    .factory('PermPermission', PermPermission);\n\n  /**\n   * Role definition factory\n   * @function\n   *\n   * @param $q {Object} Angular promise implementation\n   * @param $injector {Object} Dependency injection instance\n   * @param PermPermissionStore {permission.PermPermissionStore} Permission definition storage\n   * @param PermTransitionProperties {permission.PermTransitionProperties} Helper storing ui-router transition parameters\n   *\n   * @return {Role}\n   */\n  function PermRole($q, $injector, PermPermissionStore, PermTransitionProperties) {\n    'ngInject';\n\n    /**\n     * Role definition constructor\n     * @constructor Role\n     *\n     * @param roleName {String} Name representing role\n     * @param validationFunction {Function|Array<String>} Optional function used to validate if permissions are still\n     *   valid or list of permission names representing role\n     */\n    function Role(roleName, validationFunction) {\n      validateConstructor(roleName, validationFunction);\n\n      this.roleName = roleName;\n      this.validationFunction = annotateValidationFunction(validationFunction);\n    }\n\n    /**\n     * Checks if role is still valid\n     * @methodOf permission.Role\n     *\n     * @returns {Promise} $q.promise object\n     */\n    Role.prototype.validateRole = function () {\n      var validationLocals = {\n        roleName: this.roleName,\n        transitionProperties: PermTransitionProperties\n      };\n      var validationResult = $injector.invoke(this.validationFunction, null, validationLocals);\n\n      if (!angular.isFunction(validationResult.then)) {\n        validationResult = wrapInPromise(validationResult, this.roleName);\n      }\n\n      return validationResult;\n    };\n\n    /**\n     * Converts a value into a promise, if the value is truthy it resolves it, otherwise it rejects it\n     * @methodOf permission.Role\n     * @private\n     *\n     * @param result {Boolean} Function to be wrapped into promise\n     * @param [roleName] {String} Returned value in promise\n     *\n     * @return {Promise}\n     */\n    function wrapInPromise(result, roleName) {\n      if (result) {\n        return $q.resolve(roleName);\n      }\n\n      return $q.reject(roleName);\n    }\n\n    /**\n     * Checks if provided permission has accepted parameter types\n     * @methodOf permission.Role\n     * @private\n     *\n     * @throws {TypeError}\n     *\n     * @param roleName {String} Name representing role\n     * @param validationFunction {Function|Array<String>} Optional function used to validate if permissions are still\n     *   valid or list of permission names representing role\n     */\n    function validateConstructor(roleName, validationFunction) {\n      if (!angular.isString(roleName)) {\n        throw new TypeError('Parameter \"roleName\" name must be String');\n      }\n\n      if (!angular.isArray(validationFunction) && !angular.isFunction(validationFunction)) {\n        throw new TypeError('Parameter \"validationFunction\" must be array or function');\n      }\n    }\n\n\n    /**\n     * Ensures the validation is injectable using explicit annotation.\n     * Wraps a non-injectable function for backwards compatibility\n     * @methodOf permission.Role\n     * @private\n     *\n     * @param validationFunction {Function|Array} Function to wrap with injectable if needed\n     *\n     * @return {Function} Explicitly injectable function\n     */\n    function annotateValidationFunction(validationFunction) {\n      // Test if the validation function is just an array of permission names\n      if (angular.isArray(validationFunction) && !angular.isFunction(validationFunction[validationFunction.length - 1])) {\n        validationFunction = preparePermissionEvaluation(validationFunction);\n      } else if (!angular.isArray(validationFunction.$inject || validationFunction)) {\n        // The function is not explicitly annotated, so assume using old-style parameters\n        // and manually prepare for injection using our known old API parameters\n        validationFunction = ['roleName', 'transitionProperties', validationFunction];\n      }\n\n      return validationFunction;\n    }\n\n    /**\n     * Creates an injectable function that evaluates a set of permissions in place of a role validation function\n     * @methodOf permission.Role\n     * @private\n     *\n     * @param permissions {Array<String>} List of permissions to evaluate\n     *\n     * @return {Function}\n     */\n    function preparePermissionEvaluation(permissions) {\n      return function () {\n        var promises = permissions.map(function (permissionName) {\n          if (PermPermissionStore.hasPermissionDefinition(permissionName)) {\n            var permission = PermPermissionStore.getPermissionDefinition(permissionName);\n\n            return permission.validatePermission();\n          }\n\n          return $q.reject(permissionName);\n        });\n\n        return $q.all(promises);\n      };\n    }\n\n    return Role;\n  }\n\n  angular\n    .module('permission')\n    .factory('PermRole', PermRole);\n\n  /**\n   * Permission definition storage\n   * @name permission.PermPermissionStore\n   *\n   * @param PermPermission {permission.PermPermission|Function}\n   */\n  function PermPermissionStore(PermPermission) {\n    'ngInject';\n\n    /**\n     * @property permissionStore\n     *\n     * @type {Object}\n     */\n    var permissionStore = {};\n\n    this.definePermission = definePermission;\n    this.defineManyPermissions = defineManyPermissions;\n    this.removePermissionDefinition = removePermissionDefinition;\n    this.hasPermissionDefinition = hasPermissionDefinition;\n    this.getPermissionDefinition = getPermissionDefinition;\n    this.getStore = getStore;\n    this.clearStore = clearStore;\n\n    /**\n     * Allows to define permission on application configuration\n     * @methodOf permission.PermPermissionStore\n     *\n     * @param permissionName {String} Name of defined permission\n     * @param validationFunction {Function} Function used to validate if permission is valid\n     */\n    function definePermission(permissionName, validationFunction) {\n      permissionStore[permissionName] = new PermPermission(permissionName, validationFunction);\n    }\n\n    /**\n     * Allows to define set of permissionNames with shared validation function on application configuration\n     * @methodOf permission.PermPermissionStore\n     * @throws {TypeError}\n     *\n     * @param permissionNames {Array<Number>} Set of permission names\n     * @param validationFunction {Function} Function used to validate if permission is valid\n     */\n    function defineManyPermissions(permissionNames, validationFunction) {\n      if (!angular.isArray(permissionNames)) {\n        throw new TypeError('Parameter \"permissionNames\" name must be Array');\n      }\n\n      angular.forEach(permissionNames, function (permissionName) {\n        definePermission(permissionName, validationFunction);\n      });\n    }\n\n    /**\n     * Deletes permission\n     * @methodOf permission.PermPermissionStore\n     *\n     * @param permissionName {String} Name of defined permission\n     */\n    function removePermissionDefinition(permissionName) {\n      delete permissionStore[permissionName];\n    }\n\n    /**\n     * Checks if permission exists\n     * @methodOf permission.PermPermissionStore\n     *\n     * @param permissionName {String} Name of defined permission\n     * @returns {Boolean}\n     */\n    function hasPermissionDefinition(permissionName) {\n      return angular.isDefined(permissionStore[permissionName]);\n    }\n\n    /**\n     * Returns permission by it's name\n     * @methodOf permission.PermPermissionStore\n     *\n     * @returns {permission.Permission} Permissions definition object\n     */\n    function getPermissionDefinition(permissionName) {\n      return permissionStore[permissionName];\n    }\n\n    /**\n     * Returns all permissions\n     * @methodOf permission.PermPermissionStore\n     *\n     * @returns {Object} Permissions collection\n     */\n    function getStore() {\n      return permissionStore;\n    }\n\n    /**\n     * Removes all permissions\n     * @methodOf permission.PermPermissionStore\n     */\n    function clearStore() {\n      permissionStore = {};\n    }\n  }\n\n  angular\n    .module('permission')\n    .service('PermPermissionStore', PermPermissionStore);\n\n\n  /**\n   * Role definition storage\n   * @name permission.PermRoleStore\n   *\n   * @param PermRole {permission.PermRole} Role definition constructor\n   */\n  function PermRoleStore(PermRole) {\n    'ngInject';\n\n    var roleStore = {};\n\n    this.defineRole = defineRole;\n    this.defineManyRoles = defineManyRoles;\n    this.getRoleDefinition = getRoleDefinition;\n    this.hasRoleDefinition = hasRoleDefinition;\n    this.removeRoleDefinition = removeRoleDefinition;\n    this.getStore = getStore;\n    this.clearStore = clearStore;\n\n    /**\n     * Allows to add single role definition to the store by providing it's name and validation function\n     * @methodOf permission.PermRoleStore\n     *\n     * @param roleName {String} Name of defined role\n     * @param [validationFunction] {Function|Array<String>} Function used to validate if role is valid or set of\n     *   permission names that has to be owned to have a role\n     */\n    function defineRole(roleName, validationFunction) {\n      roleStore[roleName] = new PermRole(roleName, validationFunction);\n    }\n\n    /**\n     * Allows to define set of roleNames with shared validation function\n     * @methodOf permission.PermPermissionStore\n     * @throws {TypeError}\n     *\n     * @param roleMap {String, Function|Array<String>} Map of roles with matching validators\n     */\n    function defineManyRoles(roleMap) {\n      if (!angular.isObject(roleMap)) {\n        throw new TypeError('Parameter \"roleNames\" name must be object');\n      }\n\n      angular.forEach(roleMap, function (validationFunction, roleName) {\n        defineRole(roleName, validationFunction);\n      });\n    }\n\n    /**\n     * Deletes role from store\n     * @method permission.PermRoleStore\n     *\n     * @param roleName {String} Name of defined permission\n     */\n    function removeRoleDefinition(roleName) {\n      delete roleStore[roleName];\n    }\n\n    /**\n     * Checks if role is defined in store\n     * @method permission.PermRoleStore\n     *\n     * @param roleName {String} Name of role\n     * @returns {Boolean}\n     */\n    function hasRoleDefinition(roleName) {\n      return angular.isDefined(roleStore[roleName]);\n    }\n\n    /**\n     * Returns role definition object by it's name\n     * @method permission.PermRoleStore\n     *\n     * @returns {permission.PermRole} PermRole definition object\n     */\n    function getRoleDefinition(roleName) {\n      return roleStore[roleName];\n    }\n\n    /**\n     * Returns all role definitions\n     * @method permission.PermRoleStore\n     *\n     * @returns {Object} Defined roles collection\n     */\n    function getStore() {\n      return roleStore;\n    }\n\n    /**\n     * Removes all role definitions\n     * @method permission.PermRoleStore\n     */\n    function clearStore() {\n      roleStore = {};\n    }\n  }\n\n  angular\n    .module('permission')\n    .service('PermRoleStore', PermRoleStore);\n\n  /**\n   * Handles authorization based on provided permissions/roles.\n   * @name permission.permissionDirective\n   *\n   * Directive accepts single or combined attributes `permission-only` and `permission-except` that checks on\n   * DOM rendering if permissions/roles are met. Attributes can be passed either as String, Array or variable from\n   * parent scope. Directive also will watch for changes if applied and automatically update the view.\n   *\n   * @example\n   * <div permission\n   *      permission-only=\"'USER'\">\n   * </div>\n   * <div permission\n   *      permission-only=\"['USER','ADMIN']\"\n   *      permission-except=\"'MANAGER'\">\n   * </div>\n   * <div permission permission-sref=\"'app.login'\"></div>\n   *\n   * By default directive will show/hide elements if provided permissions matches.\n   * You can override this behaviour by passing `permission-on-authorized` and `permission-on-unauthorized`\n   *   attributes that will pass to your function `$element` as argument that you can freely manipulate your DOM\n   *   behaviour.\n   *\n   * Important! Function should be as references - `vm.disableElement` not `vm.disableElement()` to be able to\n   *   accept passed $element reference from inside of permissionDirective\n   *\n   * @example\n   * <div permission\n   *      permission-only=\"['USER','ADMIN']\"\n   *      permission-on-authorized=\"PermPermissionStrategies.disableElement\"\n   *      permission-on-unauthorized=\"PermPermissionStrategies.enableElement\">\n   * </div>\n   *\n   * @param $log {Object} Logging service\n   * @param $injector {Object} Injector instance object\n   * @param PermPermissionMap {permission.permPermissionMap|Function} Map of state access rights\n   * @param PermPermissionStrategies {permission.permPermissionStrategies} Set of pre-defined directive behaviours\n   *\n   * @returns {{\n   *   restrict: string,\n   *   bindToController: {\n   *     sref: string\n   *     only: string,\n   *     except: string,\n   *     onAuthorized: function,\n   *     onUnauthorized: function\n   *   },\n   *   controllerAs: string,\n   *   controller: controller\n   * }} Directive instance\n   */\n  function PermissionDirective($log, $injector, PermPermissionMap, PermPermissionStrategies) {\n    'ngInject';\n\n    return {\n      restrict: 'A',\n      bindToController: {\n        sref: '=?permissionSref',\n        only: '=?permissionOnly',\n        except: '=?permissionExcept',\n        onAuthorized: '&?permissionOnAuthorized',\n        onUnauthorized: '&?permissionOnUnauthorized'\n      },\n      controllerAs: 'permission',\n      controller: ['$scope', '$element', '$permission', function ($scope, $element, $permission) {\n        var permission = this;\n\n        $scope.$watchGroup(['permission.only', 'permission.except', 'sref'],\n          function () {\n            try {\n              if (isSrefStateDefined()) {\n                var PermStateAuthorization = $injector.get('PermStateAuthorization');\n\n                PermStateAuthorization\n                  .authorizeByStateName(permission.sref)\n                  .then(function () {\n                    onAuthorizedAccess();\n                  })\n                  .catch(function () {\n                    onUnauthorizedAccess();\n                  });\n              } else {\n                var PermAuthorization = $injector.get('PermAuthorization');\n                var permissionMap = new PermPermissionMap({\n                  only: permission.only,\n                  except: permission.except\n                });\n\n                PermAuthorization\n                  .authorizeByPermissionMap(permissionMap)\n                  .then(function () {\n                    onAuthorizedAccess();\n                  })\n                  .catch(function () {\n                    onUnauthorizedAccess();\n                  });\n              }\n            } catch (e) {\n              onUnauthorizedAccess();\n              $log.error(e.message);\n            }\n          });\n\n        /**\n         * Returns true when permissions should be checked based on state name\n         * @private\n         *\n         * @returns {boolean}\n         */\n        function isSrefStateDefined() {\n          return $injector.has('$state') && permission.sref;\n        }\n\n        /**\n         * Calls `onAuthorized` function if provided or show element\n         * @private\n         */\n        function onAuthorizedAccess() {\n          if (angular.isFunction(permission.onAuthorized)) {\n            permission.onAuthorized()($element);\n          } else {\n            var onAuthorizedMethodName = $permission.defaultOnAuthorizedMethod;\n            PermPermissionStrategies[onAuthorizedMethodName]($element);\n          }\n        }\n\n        /**\n         * Calls `onUnauthorized` function if provided or hide element\n         * @private\n         */\n        function onUnauthorizedAccess() {\n          if (angular.isFunction(permission.onUnauthorized)) {\n            permission.onUnauthorized()($element);\n          } else {\n            var onUnauthorizedMethodName = $permission.defaultOnUnauthorizedMethod;\n            PermPermissionStrategies[onUnauthorizedMethodName]($element);\n          }\n        }\n      }]\n    };\n  }\n\n  angular\n    .module('permission')\n    .directive('permission', PermissionDirective);\n\n\n  /**\n   * Service responsible for handling view based authorization\n   * @name permission.PermAuthorization\n   *\n   * @param $q {Object} Angular promise implementation\n   */\n  function PermAuthorization($q) {\n    'ngInject';\n\n    this.authorizeByPermissionMap = authorizeByPermissionMap;\n\n    /**\n     * Handles authorization based on provided permissions map\n     * @methodOf permission.PermAuthorization\n     *\n     * @param map {permission.PermissionMap} Map of permission names\n     *\n     * @returns {promise} $q.promise object\n     */\n    function authorizeByPermissionMap(map) {\n      var deferred = $q.defer();\n\n      resolveExceptPrivilegeMap(deferred, map);\n\n      return deferred.promise;\n    }\n\n    /**\n     * Resolves flat set of \"except\" privileges\n     * @methodOf permission.PermAuthorization\n     * @private\n     *\n     * @param deferred {Object} Promise defer\n     * @param map {permission.PermissionMap} Access rights map\n     *\n     */\n    function resolveExceptPrivilegeMap(deferred, map) {\n      var exceptPromises = map.resolvePropertyValidity(map.except);\n\n      $q.any(exceptPromises)\n        .then(function (rejectedPermissions) {\n          deferred.reject(rejectedPermissions);\n        })\n        .catch(function () {\n          resolveOnlyPermissionMap(deferred, map);\n        });\n    }\n\n    /**\n     * Resolves flat set of \"only\" privileges\n     * @methodOf permission.PermAuthorization\n     * @private\n     *\n     * @param deferred {Object} Promise defer\n     * @param map {permission.PermissionMap} Access rights map\n     */\n    function resolveOnlyPermissionMap(deferred, map) {\n      if (!map.only.length) {\n        deferred.resolve();\n        return;\n      }\n\n      var onlyPromises = map.resolvePropertyValidity(map.only);\n      $q.any(onlyPromises)\n        .then(function (resolvedPermissions) {\n          deferred.resolve(resolvedPermissions);\n        })\n        .catch(function (rejectedPermission) {\n          deferred.reject(rejectedPermission);\n        });\n    }\n  }\n\n  angular\n    .module('permission')\n    .service('PermAuthorization', PermAuthorization);\n\n\n  /**\n   * Access rights map factory\n   * @name permission.PermPermissionMap\n   *\n   * @param $q {Object} Angular promise implementation\n   * @param $log {Object} Angular logging utility\n   * @param $injector {Object} Dependency injection instance\n   * @param $permission {Object} Permission module configuration object\n   * @param PermTransitionProperties {permission.PermTransitionProperties} Helper storing ui-router transition parameters\n   * @param PermRoleStore {permission.PermRoleStore} Role definition storage\n   * @param PermPermissionStore {permission.PermPermissionStore} Permission definition storage\n   *\n   * @return {permission.PermissionMap}\n   */\n  function PermPermissionMap($q, $log, $injector, $permission, PermTransitionProperties, PermRoleStore, PermPermissionStore) {\n    'ngInject';\n\n    /**\n     * Constructs map object instructing authorization service how to handle authorizing\n     * @constructor permission.PermissionMap\n     *\n     * @param [permissionMap] {Object} Map of permissions provided to authorization service\n     * @param [permissionMap.only] {String|Array|Function} List of exclusive access right names allowed for\n     *   authorization\n     * @param [permissionMap.except] {String|Array|Function} List of exclusive access right names denied for\n     *   authorization\n     * @param [permissionMap.redirectTo] {String|Function|Object|promise} Handling redirection when rejected\n     *   authorization\n     */\n    function PermissionMap(permissionMap) {\n      // Suppress not defined object errors\n      permissionMap = permissionMap || {};\n\n      this.only = normalizeOnlyAndExceptProperty(permissionMap.only);\n      this.except = normalizeOnlyAndExceptProperty(permissionMap.except);\n      this.redirectTo = normalizeRedirectToProperty(permissionMap.redirectTo);\n    }\n\n    /**\n     * Redirects to fallback states when permissions fail\n     * @methodOf permission.PermissionMap\n     *\n     * @param [rejectedPermissionName] {String} Permission name\n     *\n     * @return {Promise}\n     */\n    PermissionMap.prototype.resolveRedirectState = function (rejectedPermissionName) {\n\n      // If redirectTo definition is not found stay where you are\n      if (!angular.isDefined(this.redirectTo)) {\n        return $q.reject();\n      }\n\n      var redirectState = this.redirectTo[rejectedPermissionName] || this.redirectTo['default'];\n\n      return resolveRedirectState(redirectState, rejectedPermissionName);\n    };\n\n    /**\n     * Resolves weather permissions set for \"only\" or \"except\" property are valid\n     * @methodOf permission.PermissionMap\n     *\n     * @param property {Array} \"only\" or \"except\" map property\n     *\n     * @return {Array<Promise>}\n     */\n    PermissionMap.prototype.resolvePropertyValidity = function (property) {\n\n      return property.map(function (privilegeName) {\n        if (PermRoleStore.hasRoleDefinition(privilegeName)) {\n          var role = PermRoleStore.getRoleDefinition(privilegeName);\n          return role.validateRole();\n        }\n\n        if (PermPermissionStore.hasPermissionDefinition(privilegeName)) {\n          var permission = PermPermissionStore.getPermissionDefinition(privilegeName);\n          return permission.validatePermission();\n        }\n\n        if (!$permission.suppressUndefinedPermissionWarning) {\n          $log.warn('Permission or role ' + privilegeName + ' was not defined.');\n        }\n        return $q.reject(privilegeName);\n      });\n    };\n\n    /**\n     * Handles function based redirection for rejected permissions\n     * @methodOf permission.PermissionMap\n     *\n     * @throws {TypeError}\n     *\n     * @param redirectFunction {Function} Redirection function\n     * @param rejectedPermissionName {String} Rejected permission\n     *\n     * @return {Promise}\n     */\n    function resolveRedirectState(redirectFunction, rejectedPermissionName) {\n      return $q\n        .when($injector.invoke(redirectFunction, null, {\n          rejectedPermission: rejectedPermissionName,\n          transitionProperties: PermTransitionProperties\n        }))\n        .then(function (redirectState) {\n          if (angular.isString(redirectState)) {\n            return {\n              state: redirectState\n            };\n          }\n\n          if (angular.isObject(redirectState)) {\n            return redirectState;\n          }\n\n          return $q.reject();\n        });\n    }\n\n    /**\n     * Handles extraction of permission map \"only\" and \"except\" properties and converts them into array objects\n     * @methodOf permission.PermissionMap\n     * @private\n     *\n     * @param property {String|Array|Function} PermPermission map property \"only\" or \"except\"\n     *\n     * @returns {Array<String>} Array of permission \"only\" or \"except\" names\n     */\n    function normalizeOnlyAndExceptProperty(property) {\n      if (angular.isString(property)) {\n        return [property];\n      }\n\n      if (angular.isArray(property)) {\n        return property;\n      }\n\n      if (angular.isFunction(property)) {\n        return property.call(null, PermTransitionProperties);\n      }\n\n      return [];\n    }\n\n    /**\n     * Convert user provided input into key value dictionary with permission/role name as a key and injectable resolver\n     * function as a value\n     * @methodOf permission.PermissionMap\n     * @private\n     *\n     * @param redirectTo {String|Function|Array|Object} PermPermission map property \"redirectTo\"\n     *\n     * @returns {Object<String, Object>} Redirection dictionary object\n     */\n    function normalizeRedirectToProperty(redirectTo) {\n      if (!angular.isDefined(redirectTo)) {\n        return;\n      }\n\n      if (isInjectable(redirectTo) || angular.isFunction(redirectTo)) {\n        return normalizeFunctionRedirectionRule(redirectTo);\n      }\n\n      if (angular.isObject(redirectTo)) {\n        if (isObjectSingleRedirectionRule(redirectTo)) {\n          return normalizeObjectSingleRedirectionRule(redirectTo);\n        }\n\n        return normalizeObjectMultipleRedirectionRule(redirectTo);\n      }\n\n      if (angular.isString(redirectTo)) {\n        return normalizeStringRedirectionRule(redirectTo);\n      }\n\n      throw new ReferenceError('Property \"redirectTo\" must be String, Function, Array or Object');\n    }\n\n    /**\n     * Convert string redirection rule into single-element redirection dictionary\n     * @methodOf permission.PermissionMap\n     * @private\n     *\n     * @param redirectTo {String} PermPermission map property \"redirectTo\"\n     *\n     * @returns {Object<String, Object>} Redirection dictionary object\n     */\n    function normalizeStringRedirectionRule(redirectTo) {\n      var redirectionMap = {};\n\n      redirectionMap.default = function () {\n        return {\n          state: redirectTo\n        };\n      };\n      redirectionMap.default.$inject = ['rejectedPermission', 'transitionProperties'];\n\n      return redirectionMap;\n    }\n\n    /**\n     * Checks if redirection object is single rule type\n     * @methodOf permission.PermissionMap\n     * @private\n     *\n     * @param redirectTo {Object} PermPermission map property \"redirectTo\"\n     *\n     * @returns {boolean}\n     */\n    function isObjectSingleRedirectionRule(redirectTo) {\n      return angular.isDefined(redirectTo.state);\n    }\n\n    /**\n     * Convert single redirection rule object into single-element redirection dictionary\n     * @methodOf permission.PermissionMap\n     * @private\n     *\n     * @param redirectTo {Object} PermPermission map property \"redirectTo\"\n     *\n     * @returns {Object<String, Object>} Redirection dictionary object\n     */\n    function normalizeObjectSingleRedirectionRule(redirectTo) {\n      var redirectionMap = {};\n\n      redirectionMap.default = function () {\n        return redirectTo;\n      };\n\n      return redirectionMap;\n    }\n\n    /**\n     * Convert multiple redirection rule object into redirection dictionary\n     * @methodOf permission.PermissionMap\n     * @private\n     *\n     * @param redirectTo {Object} PermPermission map property \"redirectTo\"\n     *\n     * @returns {Object<String, Object>} Redirection dictionary object\n     */\n    function normalizeObjectMultipleRedirectionRule(redirectTo) {\n      var redirectionMap = {};\n\n      angular.forEach(redirectTo, function (redirection, permission) {\n        if (isInjectable(redirection)) {\n          redirectionMap[permission] = redirection;\n        } else {\n          if (angular.isFunction(redirection)) {\n            redirectionMap[permission] = redirection;\n            redirectionMap[permission].$inject = [];\n          }\n        }\n\n        if (angular.isObject(redirection)) {\n          redirectionMap[permission] = function () {\n            return redirection;\n          };\n          redirectionMap[permission].$inject = [];\n        }\n\n        if (angular.isString(redirection)) {\n          redirectionMap[permission] = function () {\n            return {\n              state: redirection\n            };\n          };\n          redirectionMap[permission].$inject = [];\n        }\n      });\n\n      return redirectionMap;\n    }\n\n    /**\n     * Checks if property is injectable\n     * @methodOf permission.PermissionMap\n     * @private\n     *\n     * @param property {Array|Object}\n     *\n     * @returns {boolean}\n     */\n    function isInjectable(property) {\n      return angular.isArray(property) || (angular.isFunction(property) && angular.isArray(property.$inject));\n    }\n\n    /**\n     * Convert function redirection rule into redirection dictionary\n     * @methodOf permission.PermissionMap\n     * @private\n     *\n     * @param redirectTo {Function} PermPermission map property \"redirectTo\"\n     *\n     * @returns {Object<String, Object>} Redirection dictionary object\n     */\n    function normalizeFunctionRedirectionRule(redirectTo) {\n      var redirectionMap = {};\n\n      redirectionMap.default = redirectTo;\n\n      if (!angular.isDefined(redirectTo.$inject)) {\n        redirectionMap.default.$inject = ['rejectedPermission', 'transitionProperties'];\n      }\n\n      return redirectionMap;\n    }\n\n    return PermissionMap;\n  }\n\n  angular\n    .module('permission')\n    .factory('PermPermissionMap', PermPermissionMap);\n\n}(window, window.angular));\n"}